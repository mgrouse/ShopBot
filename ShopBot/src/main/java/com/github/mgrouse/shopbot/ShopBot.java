/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.mgrouse.shopbot;

import java.util.ArrayList;
import java.util.EnumSet;
import java.util.List;

import com.github.mgrouse.shopbot.database.DataBaseTools;
import com.github.mgrouse.shopbot.database.DataBaseTools.DBASE;
import com.github.mgrouse.shopbot.database.ItemReader;
import com.github.mgrouse.shopbot.listener.CommandDispatcher;

import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.JDABuilder;
import net.dv8tion.jda.api.OnlineStatus;
import net.dv8tion.jda.api.entities.Activity;
import net.dv8tion.jda.api.events.GenericEvent;
import net.dv8tion.jda.api.events.ReadyEvent;
import net.dv8tion.jda.api.hooks.EventListener;
import net.dv8tion.jda.api.interactions.commands.OptionType;
import net.dv8tion.jda.api.interactions.commands.build.Commands;
import net.dv8tion.jda.api.interactions.commands.build.OptionData;
import net.dv8tion.jda.api.interactions.commands.build.SlashCommandData;
import net.dv8tion.jda.api.requests.GatewayIntent;
import net.dv8tion.jda.api.requests.restaction.CommandListUpdateAction;


public class ShopBot implements EventListener

{
    private JDABuilder jdaBuilder;

    private JDA jda;

    private DataBaseTools dBase;

    public static void main(String[] args)
    {

	// Open Config file for Bot token etc.

	ShopBot bot = new ShopBot();

	bot.init();


    }


    public ShopBot()
    {
	// Init PROD DBase
	dBase = DataBaseTools.getInstance();
	DataBaseTools.init(DBASE.PROD);

	ItemReader reader = new ItemReader(dBase);
	reader.readItems("items.csv");
    }

    @Override
    public void onEvent(GenericEvent event)
    {
	if (event instanceof ReadyEvent)
	{
	    run();
	}
    }


    public void init()
    {
	// create JDA Builder
	jdaBuilder = JDABuilder.createLight(Secret.BotToken, EnumSet.noneOf(GatewayIntent.class));
	jdaBuilder.addEventListeners(this, new CommandDispatcher(dBase));
	try
	{
	    jda = jdaBuilder.build();
	    // optionally block until JDA is ready
	    jda.awaitReady();
	}
	catch (Exception e)
	{
	    e.printStackTrace();

	    // leave this here!
	    // DO NOT move to finally
	    // This means you Michael!!!
	    cleanUp();
	}
	finally
	{

	}
    }

    public void run()
    {
	jdaBuilder.setStatus(OnlineStatus.ONLINE);
	jdaBuilder.setActivity(Activity.playing("D&D"));

	// other JDA stuff? memmory cache?

	uploadCommands();

	// would there be a way to await some sort of
	// shut down command? or re-start command?
    }


    private void uploadCommands()
    {
	// Create the /commands
	List<SlashCommandData> slashCmds = new ArrayList<SlashCommandData>();

	// Import
	SlashCommandData data = Commands.slash("import", "Imports a PC from DND Beyond into the ShopBot system.");
	OptionData opts = new OptionData(OptionType.STRING, "id", "The numbers at the end of the PC's DNDB URL.");
	opts.setRequired(true);
	data.addOptions(opts);

	slashCmds.add(data);

	// Remove
	data = Commands.slash("remove", "Removes a PC from the ShopBot system.");
	opts = new OptionData(OptionType.STRING, "name", "The name of the PC.");
	opts.setRequired(true);
	data.addOptions(opts);

	slashCmds.add(data);

	// Character
	// TODO -- need to look to see if there is an open transaction before we switch
	data = Commands.slash("character", "Activates the named PC for shopping.");
	opts = new OptionData(OptionType.STRING, "name", "The name of the PC.");
	opts.setRequired(true);
	data.addOptions(opts);

	slashCmds.add(data);

	// Abort
	data = Commands.slash("abort", "Tells ShopBot to cancel the pendig transaction.");
	slashCmds.add(data);

	// Buy
	data = Commands.slash("buy", "Makes a purchase for the active PC.");

	opts = new OptionData(OptionType.INTEGER, "amt1", "The number of first Item to buy.");
	opts.setRequired(true);
	data.addOptions(opts);

	opts = new OptionData(OptionType.STRING, "item1", "The first item to buy.");
	opts.setRequired(true);
	data.addOptions(opts);

//	opts = new OptionData(OptionType.INTEGER, "amt2", "The number of second Item to buy.");
//	opts.setRequired(true);
//	data.addOptions(opts);
//
//	opts = new OptionData(OptionType.STRING, "item2", "The second item to buy.");
//	opts.setRequired(true);
//	data.addOptions(opts);

	slashCmds.add(data);

	// Gold
	data = Commands.slash("gold", "Tells ShopBot that you have deducted the gold from your D&DB sheet.");
	slashCmds.add(data);

	// Sell
	data = Commands.slash("sell", "Sells items in the active PC's inventory.");

	opts = new OptionData(OptionType.INTEGER, "amt1", "The number of first Item to sell.");
	opts.setRequired(true);
	data.addOptions(opts);

	opts = new OptionData(OptionType.STRING, "item1", "The first item to sell.");
	opts.setRequired(true);
	data.addOptions(opts);

	slashCmds.add(data);

	// Item
	data = Commands.slash("item", "Tells ShopBot that you have removed the sold items from your D&DB sheet.");
	slashCmds.add(data);

	// Status
	data = Commands.slash("status", "Displays the Player's PCs and any open transaction.");
	slashCmds.add(data);

	// add the commands
	CommandListUpdateAction action = jda.updateCommands();
	action.addCommands(slashCmds);
	action.queue();

    }

    public void cleanUp()
    {
	DataBaseTools.close();
	jda.shutdown();
    }

}
